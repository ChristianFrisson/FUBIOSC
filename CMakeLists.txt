# CMake integration by Christian Frisson (UMONS)

# Project settings
PROJECT(FUBI)
SET(FUBI_VERSION 0.7)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DFUBI_VERSION=${FUBI_VERSION}")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DFUBI_VERSION=${FUBI_VERSION}")

cmake_minimum_required(VERSION 2.6.2)

list(APPEND CMAKE_MODULE_PATHS "${CMAKE_SOURCE_DIR}/cmake")
SET(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATHS}")

# Ubuntu detection
IF(UNIX)
	# Try to find architecture
	execute_process(COMMAND uname -m OUTPUT_VARIABLE CPACK_PACKAGE_ARCHITECTURE)
	string(STRIP "${CPACK_PACKAGE_ARCHITECTURE}" CPACK_PACKAGE_ARCHITECTURE)
	# Try to find distro name and distro-specific arch
	execute_process(COMMAND lsb_release -is OUTPUT_VARIABLE LSB_ID)
	execute_process(COMMAND lsb_release -rs OUTPUT_VARIABLE LSB_RELEASE)
	string(STRIP "${LSB_ID}" LSB_ID)
	string(STRIP "${LSB_RELEASE}" LSB_RELEASE)
	set(LSB_DISTRIB "${LSB_ID}${LSB_RELEASE}")
	IF(NOT LSB_DISTRIB)
		set(LSB_DISTRIB "unix")
	ENDIF(NOT LSB_DISTRIB)
ENDIF()

OPTION(USE_DEBUG "Use Debug" ON)
OPTION(BUILD_SHARED_LIBS "Build libraries as shared" ON)

IF ( USE_DEBUG )
	MESSAGE( "\nConfigured for Debug Build")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_DEBUG -DTI_DEBUG=1 -g")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_DEBUG -DTI_DEBUG=1 -g")
	SET(CMAKE_BUILD_TYPE "Debug")
	SET(CMAKE_VERBOSE_MAKEFILE ON)
ELSE ( USE_DEBUG )
	MESSAGE( "\nConfigured for Release Build")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DTI_DEBUG=0 -O3")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DTI_DEBUG=0 -O3")
	SET(CMAKE_BUILD_TYPE "Release")
	SET(CMAKE_VERBOSE_MAKEFILE OFF)
	IF(APPLE)
		SET(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/release")
	ENDIF()
ENDIF ( USE_DEBUG )

# Dependencies
OPTION(USE_OPENNI1 "Use OpenNI 1.x" ON)
OPTION(USE_OPENNI2 "Use OpenNI 2.x" ON)
OPTION(USE_OPENCV "Use OpenCV" ON)

# OpenGL
FIND_PACKAGE( OpenGL REQUIRED )
IF ( OPENGL_FOUND )
	MESSAGE ( "Found OpenGL: ${OPENGL_LIBRARIES}" )
	INCLUDE_DIRECTORIES( ${OPENGL_INCLUDE_DIR} )
ELSE ( OPENGL_FOUND )
	MESSAGE(FATAL_ERROR "OpenGL not found.")
ENDIF ( OPENGL_FOUND )

# GLUT
FIND_PACKAGE( GLUT )
IF ( GLUT_FOUND )
	MESSAGE ( "Found GLUT: ${GLUT_LIBRARIES}" )
	INCLUDE_DIRECTORIES( ${GLUT_INCLUDE_DIR} )
ELSE ( GLUT_FOUND )
	MESSAGE(FATAL_ERROR "GLUT not found.")
ENDIF ( GLUT_FOUND )

# OpenNI
IF(WIN32)
	OPTION(USE_KINECTSDK "Use Microsoft Kinect SDK" ON)
	IF(USE_KINECTSDK)
		ADD_DEFINITIONS(-DUSE_KINECT_SDK)
	ENDIF()
ENDIF()
IF(USE_OPENNI1 OR USE_OPENNI2)
	FIND_PACKAGE(OpenNI REQUIRED)
	IF(OPENNI_FOUND)
		INCLUDE_DIRECTORIES(${OPENNI_INCLUDE_DIR})
		MESSAGE("Found OpenNI version ${OPENNI_VERSION}: ${OPENNI_LIBRARIES} in ${OPENNI_INCLUDE_DIR}")
		IF(${OPENNI_VERSION_MAJOR} GREATER 1)
			MESSAGE("Using USE_OPENNI2 definition")
			SET(USE_OPENNI1 OFF)
			ADD_DEFINITIONS(-DUSE_OPENNI2)
		ELSEIF(${OPENNI_VERSION_MAJOR} MATCHES 1)
			MESSAGE("Using USE_OPENNI1 definition")
			SET(USE_OPENNI2 OFF)
			ADD_DEFINITIONS(-DUSE_OPENNI1)
		ELSE()
			MESSAGE(FATAL_ERROR "Couldn't determine the OpenNI version")
		ENDIF()
	ELSE()
		IF("${LSB_DISTRIB}" MATCHES "Ubuntu")
			MESSAGE(FATAL_ERROR "Couldn't find OpenNI.\nPlease install it by entering the following command lines on a terminal:\nsudo add-apt-repository ppa:v-launchpad-jochen-sprickerhof-de/pcl\nsudo apt-get update\nsudo apt-get install libopenni-dev")
		ELSE()
			MESSAGE(FATAL_ERROR "Couldn't find OpenNI")
		ENDIF()
	ENDIF()
ENDIF()

# NiTE
IF(USE_OPENNI2)
IF(${OPENNI_VERSION_MAJOR} GREATER 1)
	FIND_PACKAGE(NiTE REQUIRED)
	IF(NITE_FOUND)
		INCLUDE_DIRECTORIES(${NITE_INCLUDE_DIR})
		MESSAGE("Found NiTE: ${NITE_LIBRARIES} in ${NITE_INCLUDE_DIR}")
	ELSE()
		MESSAGE(FATAL_ERROR "Couldn't find NiTE, required for OpenNI 2.x support")
	ENDIF()
ELSE()
	SET(USE_OPENNI2 OFF)
ENDIF()
ENDIF()
# OpenCV
SET(OpenCV_MIN_VERSION "2.3.1")
IF(USE_OPENCV)
	#SET(OpenCV_CONFIG_PATH "${OpenCV_DIR}")
	find_path(OpenCV_DIR NAMES opencv-config.cmake OpenCVConfig.cmake PATH_SUFFIXES lib/cmake lib)
	FIND_PACKAGE ( OpenCV REQUIRED COMPONENTS core contrib features2d imgproc legacy objdetect video highgui)
	IF(OpenCV_FOUND)
		IF(${OpenCV_VERSION} VERSION_LESS ${OpenCV_MIN_VERSION} AND (SUPPORT_VIDEO OR SUPPORT_IMAGE) )
			MESSAGE(FATAL_ERROR "OpenCV version (${OpenCV_VERSION} is present, while ${OpenCV_MIN_VERSION}+ is required")
		ENDIF()
		INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS})

		IF(MINGW OR WIN32)
			SET(OpenCV_LIBRARIES ${OpenCV_LIBS_OPT} ${OpenCV_EXTRA_LIBS_OPT})
		ELSE()
			SET(OpenCV_LIBRARIES ${OpenCV_LIBS})
		ENDIF()

		MESSAGE("Found OpenCV ${OpenCV_VERSION} libraries ${OpenCV_LIBRARIES} and headers ${OpenCV_INCLUDE_DIRS}")
		IF(${OpenCV_VERSION_MAJOR} MATCHES 2 AND ${OpenCV_VERSION_MINOR} MATCHES 2)
			ADD_DEFINITIONS(-DUSE_OPENCV22)
		ELSE()
			ADD_DEFINITIONS(-DUSE_OPENCV)
		ENDIF()
	ELSE()
		MESSAGE(FATAL_ERROR "OpenCV not found.")
	ENDIF()
ENDIF()

MESSAGE("\nConfiguration:")
IF(USE_OPENNI1)
	MESSAGE("[X] with OpenNI 1.x support")
ELSE()
	MESSAGE("[ ] with OpenNI 1.x support")
ENDIF()
IF(USE_OPENNI2)
	MESSAGE("[X] with OpenNI 2.x support")
ELSE()
	MESSAGE("[ ] with OpenNI 2.x support")
ENDIF()
IF(USE_OPENCV)
	MESSAGE("[X] with OpenCV support")
ELSE()
	MESSAGE("[ ] with OpenCV support")
ENDIF()

# Project library and executables
MESSAGE("\nTargets:")
SET(LIBRARY_NAME "FUBI")
#IF(OPENNI_FOUND)# AND NITE_FOUND)

	#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}-std=c++0x")
	#SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c++0x")

	INCLUDE_DIRECTORIES(Fubi Fubi/GestureRecognizer include)

	FILE(GLOB ${LIBRARY_NAME}_SRCS Fubi/*.cpp Fubi/GestureRecognizer/*.cpp)
	FILE(GLOB ${LIBRARY_NAME}_HDRS Fubi/*.h Fubi/GestureRecognizer/*.h)

	ADD_LIBRARY(${LIBRARY_NAME} ${${LIBRARY_NAME}_SRCS} ${${LIBRARY_NAME}_HDRS})
	TARGET_LINK_LIBRARIES(${LIBRARY_NAME} )
	IF(OPENNI_FOUND)
		TARGET_LINK_LIBRARIES(${LIBRARY_NAME} ${OPENNI_LIBRARIES})
	ENDIF()
		IF(NITE_FOUND)
		TARGET_LINK_LIBRARIES(${LIBRARY_NAME} ${NITE_LIBRARIES})
	ENDIF()
	IF(OpenCV_FOUND)
		TARGET_LINK_LIBRARIES(${LIBRARY_NAME} ${OpenCV_LIBRARIES})
	ENDIF()

	MESSAGE("[X] ${LIBRARY_NAME}")

	SET(EXECUTABLE_NAME "RecognizerTest")
	IF(GLUT_FOUND)
		ADD_EXECUTABLE(${EXECUTABLE_NAME} Samples/RecognizerTest/main.cpp)
		ADD_DEPENDENCIES(${EXECUTABLE_NAME} ${LIBRARY_NAME})
		TARGET_LINK_LIBRARIES(${EXECUTABLE_NAME} ${LIBRARY_NAME} ${OPENGL_LIBRARIES} ${GLUT_LIBRARIES})
		# For now copy the XML files to the current binary dir
		EXEC_PROGRAM(cp ARGS "${CMAKE_CURRENT_SOURCE_DIR}/bin/* ${CMAKE_CURRENT_BINARY_DIR}" OUTPUT_VARIABLE FUBI_XML_OUT RESULT_VARIABLE FUBI_XML_RES)
		# For later, install the files wherever suitable
		#INSTALL(PROGRAMS "${CMAKE_CURRENT_SOURCE_DIR}/bin/*.xml" "${CMAKE_CURRENT_SOURCE_DIR}/bin/*.dtd" DESTINATION ${CMAKE_CURRENT_BINARY_DIR} COMPONENT ${EXECUTABLE_NAME})
		MESSAGE("[X] ${EXECUTABLE_NAME}")
	ELSE()
		MESSAGE("[ ] ${EXECUTABLE_NAME}")
	ENDIF()

#ELSE()
#	MESSAGE("[ ] ${LIBRARY_NAME}")
#ENDIF()
